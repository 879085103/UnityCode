 void Control()
    {

        //获取鼠标移动距离
        float rh = Input.GetAxis("Mouse X");
        float rv = Input.GetAxis("Mouse Y");

        // 旋转摄像机
        m_camRot.x -= rv;
        m_camRot.y += rh;
        m_camTransform.eulerAngles = m_camRot;

        // 使主角的面向方向与摄像机一致
        Vector3 camrot = m_camTransform.eulerAngles;
        camrot.x = 0; camrot.z = 0;
        m_transform.eulerAngles = camrot;

        // 定义3个值控制移动
        float xm = 0, ym = 0, zm = 0;

        // 重力运动
        ym -= m_gravity*Time.deltaTime;

        // 上下左右运动
        if (Input.GetKey(KeyCode.W)){
            zm += m_movSpeed * Time.deltaTime;
        }
        else if (Input.GetKey(KeyCode.S)){
            zm -= m_movSpeed * Time.deltaTime;
        }

        if (Input.GetKey(KeyCode.A)){
            xm -= m_movSpeed * Time.deltaTime;
        }
        else if (Input.GetKey(KeyCode.D)){
            xm += m_movSpeed * Time.deltaTime;
        }

        // 更新射击间隔时间
        m_shootTimer -= Time.deltaTime;

        // 鼠标左键射击
        if (Input.GetMouseButton(0) && m_shootTimer<=0)
        {
            m_shootTimer = 0.1f;

            this.GetComponent<AudioSource>().PlayOneShot(m_audio);

            // 减少弹药，更新弹药UI
            GameManager.Instance.SetAmmo(1);

            // RaycastHit用来保存射线的探测结果
            RaycastHit info;

            // 从muzzlepoint的位置，向摄像机面向的正方向射出一根射线
            // 射线只能与m_layer所指定的层碰撞
            bool hit = Physics.Raycast(m_muzzlepoint.position, m_camTransform.TransformDirection(Vector3.forward), out info, 100, m_layer);
            if (hit)
            {
                // 如果射中了Tag为enemy的游戏体
                if (info.transform.tag.CompareTo("enemy") == 0)
                {
                    Enemy enemy = info.transform.GetComponent<Enemy>();

                    // 敌人减少生命
                    enemy.OnDamage(1);
                }

                // 在射中的地方释放一个粒子效果
                Instantiate(m_fx, info.point, info.transform.rotation);
            }
        }


        // 使用角色控制器提供的Move函数进行移动 它会自动检测碰撞
        m_ch.Move( m_transform.TransformDirection(new Vector3(xm, ym, zm)) );

        // 更新摄像机位置（始终与Player一致）
        //Vector3 pos = m_transform.position;
        //pos.y += m_camHeight;
        //m_camTransform.position = pos;
        m_camTransform.position = m_transform.TransformPoint(0, m_camHeight, 0);
    }
